Elm.Pages = Elm.Pages || {};
Elm.Pages.User = Elm.Pages.User || {};
Elm.Pages.User.Decoder = Elm.Pages.User.Decoder || {};
Elm.Pages.User.Decoder.make = function (_elm) {
   "use strict";
   _elm.Pages = _elm.Pages || {};
   _elm.Pages.User = _elm.Pages.User || {};
   _elm.Pages.User.Decoder = _elm.Pages.User.Decoder || {};
   if (_elm.Pages.User.Decoder.values) return _elm.Pages.User.Decoder.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Company$Model = Elm.Company.Model.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Pages$User$Model = Elm.Pages.User.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var decode = function () {
      var number = $Json$Decode.oneOf(_U.list([$Json$Decode.$int,A2($Json$Decode.customDecoder,$Json$Decode.string,$String.toInt)]));
      var company = A3($Json$Decode.object2,$Company$Model.Model,A2($Json$Decode._op[":="],"id",number),A2($Json$Decode._op[":="],"label",$Json$Decode.string));
      return A2($Json$Decode.at,
      _U.list(["data","0"]),
      A4($Json$Decode.object3,
      F3(function (v0,v1,v2) {    return {ctor: "_Tuple3",_0: v0,_1: v1,_2: v2};}),
      A2($Json$Decode._op[":="],"id",number),
      A2($Json$Decode._op[":="],"label",$Json$Decode.string),
      A2($Json$Decode._op[":="],"companies",$Json$Decode.list(company))));
   }();
   return _elm.Pages.User.Decoder.values = {_op: _op,decode: decode};
};