Elm.Pages = Elm.Pages || {};
Elm.Pages.User = Elm.Pages.User || {};
Elm.Pages.User.Model = Elm.Pages.User.Model || {};
Elm.Pages.User.Model.make = function (_elm) {
   "use strict";
   _elm.Pages = _elm.Pages || {};
   _elm.Pages.User = _elm.Pages.User || {};
   _elm.Pages.User.Model = _elm.Pages.User.Model || {};
   if (_elm.Pages.User.Model.values) return _elm.Pages.User.Model.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Company$Model = Elm.Company.Model.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Http = Elm.Http.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var Model = F5(function (a,b,c,d,e) {    return {name: a,id: b,status: c,accessToken: d,companies: e};});
   var HttpError = function (a) {    return {ctor: "HttpError",_0: a};};
   var Fetched = {ctor: "Fetched"};
   var Fetching = {ctor: "Fetching"};
   var Init = {ctor: "Init"};
   var LoggedIn = function (a) {    return {ctor: "LoggedIn",_0: a};};
   var Anonymous = {ctor: "Anonymous"};
   var initialModel = {name: Anonymous,id: 0,status: Init,accessToken: "",companies: _U.list([$Company$Model.initialModel])};
   return _elm.Pages.User.Model.values = {_op: _op
                                         ,Anonymous: Anonymous
                                         ,LoggedIn: LoggedIn
                                         ,Init: Init
                                         ,Fetching: Fetching
                                         ,Fetched: Fetched
                                         ,HttpError: HttpError
                                         ,Model: Model
                                         ,initialModel: initialModel};
};