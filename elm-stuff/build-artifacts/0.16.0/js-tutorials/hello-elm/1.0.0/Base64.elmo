Elm.Base64 = Elm.Base64 || {};
Elm.Base64.make = function (_elm) {
   "use strict";
   _elm.Base64 = _elm.Base64 || {};
   if (_elm.Base64.values) return _elm.Base64.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Ascii = Elm.Ascii.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $BitList = Elm.BitList.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var resultUnfold = function (list) {
      var _p0 = list;
      if (_p0.ctor === "[]") {
            return _U.list([]);
         } else {
            if (_p0._0.ctor === "Ok") {
                  return A2($List._op["::"],_p0._0._0,resultUnfold(_p0._1));
               } else {
                  return _U.list([]);
               }
         }
   };
   var dropLast = F2(function (number,list) {    return $List.reverse(A2($List.drop,number,$List.reverse(list)));});
   var partitionBits = function (list) {
      var list$ = A3($List.foldr,$List.append,_U.list([]),A2($List.map,$BitList.fromByte,list));
      return A2($List.map,$BitList.toByte,A2($BitList.partition,6,list$));
   };
   var base64CharsList = $String.toList("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
   var base64Map = function () {
      var insert = F2(function (_p1,dict) {    var _p2 = _p1;return A3($Dict.insert,_p2._1,_p2._0,dict);});
      return A3($List.foldl,insert,$Dict.empty,A2($List.indexedMap,F2(function (v0,v1) {    return {ctor: "_Tuple2",_0: v0,_1: v1};}),base64CharsList));
   }();
   var isValid = function (string) {
      var string$ = A2($String.endsWith,"==",string) ? A2($String.dropRight,2,string) : A2($String.endsWith,"=",string) ? A2($String.dropRight,
      1,
      string) : string;
      var isBase64Char = function ($char) {    return A2($Dict.member,$char,base64Map);};
      return A2($String.all,isBase64Char,string$);
   };
   var toBase64BitList = function (string) {
      var endingEquals = A2($String.endsWith,"==",string) ? 2 : A2($String.endsWith,"=",string) ? 1 : 0;
      var stripped = $String.toList(A2($String.dropRight,endingEquals,string));
      var base64ToInt = function ($char) {    var _p3 = A2($Dict.get,$char,base64Map);if (_p3.ctor === "Just") {    return _p3._0;} else {    return -1;}};
      var numberList = A2($List.map,base64ToInt,stripped);
      return A2(dropLast,endingEquals * 2,A2($List.concatMap,A2($Basics.flip,$BitList.fromNumberWithSize,6),numberList));
   };
   var toCharList = function (bitList) {
      var array = $Array.fromList(base64CharsList);
      var toBase64Char = function (index) {    return A2($Maybe.withDefault,_U.chr("!"),A2($Array.get,index,array));};
      var toChars = function (_p4) {
         var _p5 = _p4;
         var _p6 = {ctor: "_Tuple3",_0: _p5._0,_1: _p5._1,_2: _p5._2};
         if (_p6._2 === -1) {
               if (_p6._1 === -1) {
                     return A2($List.append,A2(dropLast,2,A2($List.map,toBase64Char,partitionBits(_U.list([_p6._0,0,0])))),_U.list([_U.chr("="),_U.chr("=")]));
                  } else {
                     return A2($List.append,A2(dropLast,1,A2($List.map,toBase64Char,partitionBits(_U.list([_p6._0,_p6._1,0])))),_U.list([_U.chr("=")]));
                  }
            } else {
               return A2($List.map,toBase64Char,partitionBits(_U.list([_p6._0,_p6._1,_p6._2])));
            }
      };
      return A2($List.concatMap,toChars,bitList);
   };
   var toTupleList = function (list) {
      var _p7 = list;
      if (_p7.ctor === "::") {
            if (_p7._1.ctor === "::") {
                  if (_p7._1._1.ctor === "::") {
                        return A2($List._op["::"],{ctor: "_Tuple3",_0: _p7._0,_1: _p7._1._0,_2: _p7._1._1._0},toTupleList(_p7._1._1._1));
                     } else {
                        return _U.list([{ctor: "_Tuple3",_0: _p7._0,_1: _p7._1._0,_2: -1}]);
                     }
               } else {
                  return _U.list([{ctor: "_Tuple3",_0: _p7._0,_1: -1,_2: -1}]);
               }
         } else {
            return _U.list([]);
         }
   };
   var toAsciiList = function (string) {
      var toInt = function ($char) {    var _p8 = $Ascii.toInt($char);if (_p8.ctor === "Ok") {    return _p8._0;} else {    return -1;}};
      return A2($List.map,toInt,$String.toList(string));
   };
   var decode = function (s) {
      if ($Basics.not(isValid(s))) return $Result.Err("Error while decoding"); else {
            var bitList = A2($List.map,$BitList.toByte,A2($BitList.partition,8,toBase64BitList(s)));
            var charList = resultUnfold(A2($List.map,$Ascii.fromInt,bitList));
            return $Result.Ok($String.fromList(charList));
         }
   };
   var encode = function (s) {
      return $Basics.not($Ascii.isValid(s)) ? $Result.Err("Error while encoding") : $Result.Ok($String.fromList(toCharList(toTupleList(toAsciiList(s)))));
   };
   return _elm.Base64.values = {_op: _op,encode: encode,decode: decode};
};